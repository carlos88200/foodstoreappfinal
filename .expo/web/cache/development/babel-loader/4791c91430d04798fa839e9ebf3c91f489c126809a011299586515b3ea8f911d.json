{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { getItemCount } from '@react-stately/collections';\nimport { isFocusVisible, useKeyboard } from '@react-aria/interactions';\nimport { useHover, usePress } from '@react-native-aria/interactions';\nimport { mapDomPropsToRN } from '@react-native-aria/utils';\nimport { mergeProps, useSlotId } from '@react-aria/utils';\nimport { useSelectableItem } from '@react-aria/selection';\nexport function useMenuItem(props, state, ref) {\n  var isSelected = props.isSelected,\n    isDisabled = props.isDisabled,\n    key = props.key,\n    onClose = props.onClose,\n    _props$closeOnSelect = props.closeOnSelect,\n    closeOnSelect = _props$closeOnSelect === void 0 ? true : _props$closeOnSelect,\n    isVirtualized = props.isVirtualized,\n    onAction = props.onAction;\n  var role = 'menuitem';\n  if (state.selectionManager.selectionMode === 'single') {\n    role = 'menuitemradio';\n  } else if (state.selectionManager.selectionMode === 'multiple') {\n    role = 'menuitemcheckbox';\n  }\n  var labelId = useSlotId();\n  var descriptionId = useSlotId();\n  var keyboardId = useSlotId();\n  var ariaProps = {\n    'aria-disabled': isDisabled,\n    role: role,\n    'aria-label': props['aria-label'],\n    'aria-labelledby': labelId,\n    'aria-describedby': [descriptionId, keyboardId].filter(Boolean).join(' ') || undefined\n  };\n  if (state.selectionManager.selectionMode !== 'none') {\n    ariaProps['aria-checked'] = isSelected;\n  }\n  if (isVirtualized) {\n    ariaProps['aria-posinset'] = state.collection.getItem(key).index;\n    ariaProps['aria-setsize'] = getItemCount(state.collection);\n  }\n  var onPressStart = function onPressStart(e) {\n    if (e.pointerType === 'keyboard' && onAction) {\n      onAction(key);\n    }\n  };\n  var onPress = function onPress() {\n    if (closeOnSelect && onClose) {\n      onClose();\n    }\n  };\n  var onPressUp = function onPressUp(e) {\n    if (e.pointerType !== 'keyboard') {\n      if (onAction) {\n        onAction(key);\n      }\n    }\n  };\n  var _useSelectableItem = useSelectableItem({\n      selectionManager: state.selectionManager,\n      key: key,\n      ref: ref,\n      shouldSelectOnPressUp: true\n    }),\n    itemProps = _useSelectableItem.itemProps;\n  var _usePress = usePress(mergeProps({\n      onPressStart: onPressStart,\n      onPressUp: onPressUp,\n      onPress: onPress,\n      isDisabled: isDisabled\n    }, mapDomPropsToRN(itemProps))),\n    pressProps = _usePress.pressProps;\n  var _useHover = useHover({\n      isDisabled: isDisabled,\n      onHoverStart: function onHoverStart() {\n        if (!isFocusVisible()) {\n          state.selectionManager.setFocused(true);\n          state.selectionManager.setFocusedKey(key);\n        }\n      }\n    }, ref),\n    hoverProps = _useHover.hoverProps;\n  var _useKeyboard = useKeyboard({\n      onKeyDown: function onKeyDown(e) {\n        if (e.repeat) {\n          e.continuePropagation();\n          return;\n        }\n        switch (e.key) {\n          case ' ':\n            if (!isDisabled && closeOnSelect && onClose) {\n              onClose();\n            }\n            break;\n          case 'Enter':\n            if (!isDisabled && closeOnSelect && onClose) {\n              onClose();\n            }\n            break;\n          default:\n            e.continuePropagation();\n            break;\n        }\n      }\n    }),\n    keyboardProps = _useKeyboard.keyboardProps;\n  return {\n    menuItemProps: _objectSpread(_objectSpread({}, mapDomPropsToRN(ariaProps)), mergeProps(pressProps, hoverProps, keyboardProps)),\n    labelProps: {\n      nativeID: labelId\n    },\n    descriptionProps: {\n      nativeID: descriptionId\n    },\n    keyboardShortcutProps: {\n      nativeID: keyboardId\n    }\n  };\n}","map":{"version":3,"names":["getItemCount","isFocusVisible","useKeyboard","useHover","usePress","mapDomPropsToRN","mergeProps","useSlotId","useSelectableItem","useMenuItem","props","state","ref","isSelected","isDisabled","key","onClose","_props$closeOnSelect","closeOnSelect","isVirtualized","onAction","role","selectionManager","selectionMode","labelId","descriptionId","keyboardId","ariaProps","filter","Boolean","join","undefined","collection","getItem","index","onPressStart","e","pointerType","onPress","onPressUp","_useSelectableItem","shouldSelectOnPressUp","itemProps","_usePress","pressProps","_useHover","onHoverStart","setFocused","setFocusedKey","hoverProps","_useKeyboard","onKeyDown","repeat","continuePropagation","keyboardProps","menuItemProps","_objectSpread","labelProps","nativeID","descriptionProps","keyboardShortcutProps"],"sources":["D:\\Universidad\\8 semestre\\mobiles\\proyecto\\1.75\\Cafeteria-App\\node_modules\\@react-native-aria\\menu\\src\\useMenuItem.web.ts"],"sourcesContent":["/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */\r\n\r\nimport { getItemCount } from '@react-stately/collections';\r\nimport { Key, RefObject } from 'react';\r\nimport { isFocusVisible, useKeyboard } from '@react-aria/interactions';\r\nimport { useHover, usePress } from '@react-native-aria/interactions';\r\nimport { mapDomPropsToRN } from '@react-native-aria/utils';\r\nimport { mergeProps, useSlotId } from '@react-aria/utils';\r\nimport { PressEvent } from '@react-types/shared';\r\nimport { TreeState } from '@react-stately/tree';\r\nimport { useSelectableItem } from '@react-aria/selection';\r\nimport { ViewProps } from 'react-native';\r\ninterface MenuItemAria {\r\n  /** Props for the menu item element. */\r\n  menuItemProps: ViewProps;\r\n\r\n  /** Props for the main text element inside the menu item. */\r\n  labelProps: ViewProps;\r\n\r\n  /** Props for the description text element inside the menu item, if any. */\r\n  descriptionProps: ViewProps;\r\n\r\n  /** Props for the keyboard shortcut text element inside the item, if any. */\r\n  keyboardShortcutProps: ViewProps;\r\n}\r\n\r\ninterface AriaMenuItemProps {\r\n  /** Whether the menu item is disabled. */\r\n  'isDisabled'?: boolean;\r\n\r\n  /** Whether the menu item is selected. */\r\n  'isSelected'?: boolean;\r\n\r\n  /** A screen reader only label for the menu item. */\r\n  'aria-label'?: string;\r\n\r\n  /** The unique key for the menu item. */\r\n  'key'?: any;\r\n\r\n  /** Handler that is called when the menu should close after selecting an item. */\r\n  'onClose'?: () => void;\r\n\r\n  /**\r\n   * Whether the menu should close when the menu item is selected.\r\n   * @default true\r\n   */\r\n  'closeOnSelect'?: boolean;\r\n\r\n  /** Whether the menu item is contained in a virtual scrolling menu. */\r\n  'isVirtualized'?: boolean;\r\n\r\n  /** Handler that is called when the user activates the item. */\r\n  'onAction'?: (key: Key) => void;\r\n}\r\n\r\n/**\r\n * Provides the behavior and accessibility implementation for an item in a menu.\r\n * See `useMenu` for more details about menus.\r\n * @param props - Props for the item.\r\n * @param state - State for the menu, as returned by `useTreeState`.\r\n */\r\nexport function useMenuItem<T>(\r\n  props: AriaMenuItemProps,\r\n  state: TreeState<T>,\r\n  ref: RefObject<HTMLElement>\r\n): MenuItemAria {\r\n  let {\r\n    isSelected,\r\n    isDisabled,\r\n    key,\r\n    onClose,\r\n    closeOnSelect = true,\r\n    isVirtualized,\r\n    onAction,\r\n  } = props;\r\n\r\n  let role = 'menuitem';\r\n  if (state.selectionManager.selectionMode === 'single') {\r\n    role = 'menuitemradio';\r\n  } else if (state.selectionManager.selectionMode === 'multiple') {\r\n    role = 'menuitemcheckbox';\r\n  }\r\n\r\n  let labelId = useSlotId();\r\n  let descriptionId = useSlotId();\r\n  let keyboardId = useSlotId();\r\n\r\n  let ariaProps: any = {\r\n    'aria-disabled': isDisabled,\r\n    role,\r\n    'aria-label': props['aria-label'],\r\n    'aria-labelledby': labelId,\r\n    'aria-describedby':\r\n      [descriptionId, keyboardId].filter(Boolean).join(' ') || undefined,\r\n  };\r\n  if (state.selectionManager.selectionMode !== 'none') {\r\n    ariaProps['aria-checked'] = isSelected;\r\n  }\r\n\r\n  if (isVirtualized) {\r\n    ariaProps['aria-posinset'] = state.collection.getItem(key).index;\r\n    ariaProps['aria-setsize'] = getItemCount(state.collection);\r\n  }\r\n\r\n  let onPressStart = (e: PressEvent) => {\r\n    if (e.pointerType === 'keyboard' && onAction) {\r\n      onAction(key);\r\n    }\r\n  };\r\n\r\n  let onPress = () => {\r\n    if (closeOnSelect && onClose) {\r\n      onClose();\r\n    }\r\n  };\r\n  let onPressUp = (e: PressEvent) => {\r\n    if (e.pointerType !== 'keyboard') {\r\n      if (onAction) {\r\n        onAction(key);\r\n      }\r\n    }\r\n  };\r\n\r\n  let { itemProps } = useSelectableItem({\r\n    selectionManager: state.selectionManager,\r\n    key,\r\n    ref,\r\n    shouldSelectOnPressUp: true,\r\n  });\r\n\r\n  let { pressProps } = usePress(\r\n    mergeProps(\r\n      { onPressStart, onPressUp, onPress, isDisabled },\r\n      mapDomPropsToRN(itemProps)\r\n    )\r\n  );\r\n\r\n  let { hoverProps } = useHover(\r\n    {\r\n      isDisabled,\r\n      onHoverStart() {\r\n        if (!isFocusVisible()) {\r\n          state.selectionManager.setFocused(true);\r\n          state.selectionManager.setFocusedKey(key);\r\n        }\r\n      },\r\n    },\r\n    ref\r\n  );\r\n\r\n  const { keyboardProps } = useKeyboard({\r\n    onKeyDown: (e) => {\r\n      // Ignore repeating events, which may have started on the menu trigger before moving\r\n      // focus to the menu item. We want to wait for a second complete key press sequence.\r\n      if (e.repeat) {\r\n        e.continuePropagation();\r\n        return;\r\n      }\r\n      switch (e.key) {\r\n        case ' ':\r\n          if (!isDisabled && closeOnSelect && onClose) {\r\n            onClose();\r\n          }\r\n          break;\r\n        case 'Enter':\r\n          // The Enter key should always close on select, except if overridden.\r\n          if (!isDisabled && closeOnSelect && onClose) {\r\n            onClose();\r\n          }\r\n          break;\r\n        default:\r\n          e.continuePropagation();\r\n          break;\r\n      }\r\n    },\r\n  });\r\n\r\n  return {\r\n    menuItemProps: {\r\n      ...mapDomPropsToRN(ariaProps),\r\n      ...mergeProps(pressProps, hoverProps, keyboardProps),\r\n    },\r\n    labelProps: {\r\n      nativeID: labelId,\r\n    },\r\n    descriptionProps: {\r\n      nativeID: descriptionId,\r\n    },\r\n    keyboardShortcutProps: {\r\n      nativeID: keyboardId,\r\n    },\r\n  };\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}