{"ast":null,"code":"import { useId } from '@react-aria/utils';\nexport function useMenuSection(props) {\n  var heading = props.heading,\n    ariaLabel = props['aria-label'];\n  var headingId = useId();\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      'nativeID': headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      'role': 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}","map":{"version":3,"names":["useId","useMenuSection","props","heading","ariaLabel","headingId","itemProps","role","headingProps","groupProps","undefined"],"sources":["D:\\programas carlos\\xampp\\htdocs\\1.75\\Cafeteria-App\\node_modules\\@react-native-aria\\menu\\src\\useMenuSection.ts"],"sourcesContent":["import { ReactNode } from 'react';\r\nimport { useId } from '@react-aria/utils';\r\n\r\ninterface AriaMenuSectionProps {\r\n  /** The heading for the section. */\r\n  'heading'?: ReactNode;\r\n  /** An accessibility label for the section. Required if `heading` is not present. */\r\n  'aria-label'?: string;\r\n}\r\n\r\ninterface MenuSectionAria {\r\n  /** Props for the wrapper list item. */\r\n  itemProps: any;\r\n\r\n  /** Props for the heading element, if any. */\r\n  headingProps: any;\r\n\r\n  /** Props for the group element. */\r\n  groupProps: any;\r\n}\r\n\r\n/**\r\n * Provides the behavior and accessibility implementation for a section in a menu.\r\n * See `useMenu` for more details about menus.\r\n * @param props - Props for the section.\r\n */\r\nexport function useMenuSection(props: AriaMenuSectionProps): MenuSectionAria {\r\n  let { heading, 'aria-label': ariaLabel } = props;\r\n  let headingId = useId();\r\n\r\n  return {\r\n    itemProps: {\r\n      //@ts-ignore\r\n      role: 'presentation',\r\n    },\r\n    headingProps: heading\r\n      ? {\r\n          // Techincally, menus cannot contain headings according to ARIA.\r\n          // We hide the heading from assistive technology, and only use it\r\n          // as a label for the nested group.\r\n          'nativeID': headingId,\r\n          'aria-hidden': true,\r\n        }\r\n      : {},\r\n    groupProps: {\r\n      'role': 'group',\r\n      'aria-label': ariaLabel,\r\n      'aria-labelledby': heading ? headingId : undefined,\r\n    },\r\n  };\r\n}\r\n"],"mappings":"AACA,SAASA,KAAK,QAAQ,mBAAmB;AAyBzC,OAAO,SAASC,cAAcA,CAACC,KAA2B,EAAmB;EAC3E,IAAMC,OAAO,GAA8BD,KAAK,CAA1CC,OAAO;IAAgBC,SAAA,GAAcF,KAAK,CAAjC,YAAY;EAC3B,IAAIG,SAAS,GAAGL,KAAK,CAAC,CAAC;EAEvB,OAAO;IACLM,SAAS,EAAE;MAETC,IAAI,EAAE;IACR,CAAC;IACDC,YAAY,EAAEL,OAAO,GACjB;MAIE,UAAU,EAAEE,SAAS;MACrB,aAAa,EAAE;IACjB,CAAC,GACD,CAAC,CAAC;IACNI,UAAU,EAAE;MACV,MAAM,EAAE,OAAO;MACf,YAAY,EAAEL,SAAS;MACvB,iBAAiB,EAAED,OAAO,GAAGE,SAAS,GAAGK;IAC3C;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}